Don't edit this file please!

* Homework 1 - due 2014-09-18 by 11:59PM

Complete the tasks listed in course-log.org under week 1.

* Homework 2 - due 2014-09-30 by 11:59PM

1. Complete the course-log.org entries for weeks 2 and 3.  This must include copying and pasting the following 
   checklists into course-log.org, then checking the boxes to indicate you have done each one.  You must also include
   any other reading, experiments, or new things that you have learned about distributed systems (or Linux in general).
   (It is very helpful for me to know what is useful to you!).

   *REMINDER*: Please put your journal entries inside course-log.org under the appropriate week.  My workflow is to run 
   script/macro to open each course-log.org file in turn and open the "Week <n>" tab.  I won't go hunting elsewhere.

   Week 2

   - [ ] read http://www.joelonsoftware.com/articles/Unicode.html
   - [ ] read Textbook chapter: Streams
   - [ ] read Textbook chapter: Looking Up Internet Addresses
   - [ ] read Textbook chapter: Sockets for Clients
   - [ ] read Textbook chapter: Sockets for Servers

   Week 3

   - [ ] read Textbook chapter: Threads
   - [ ] ran all code in week 2 class lectures with netcat / socat (as appropriate)

2. Complete the following programs and test them out.  

   If you are reading this in Emacs:

   - Move the cursor over each line beginning with "**" and press TAB to unfold / fold.

   - Move the cursor over the underlined filepath, then press C-c C-o to open the file.
     Press C-x 0 to close that new window again.

** [[./src/main/scala/csp/io/Concat.scala]]

This program concatenates all of the files except the last one listed on the command line.  The output goes to the last file
specified on the command line.

#+BEGIN_EXAMPLE
$ echo hello > file1

$ echo world > file2

$ echo a bit more > file3

$ ./target/start csp.io.Concat file1 file2 file3 file4

$ ls -lh file[1234]
-rw-rw-r-- 1 cpitcher cpitcher  6 Sep 25 10:01 file1
-rw-rw-r-- 1 cpitcher cpitcher  6 Sep 25 10:01 file2
-rw-rw-r-- 1 cpitcher cpitcher 11 Sep 25 10:01 file3
-rw-rw-r-- 1 cpitcher cpitcher 23 Sep 25 10:01 file4

$ cat file4
hello
world
a bit more
#+END_EXAMPLE

If it helps, this behaves just like:
#+BEGIN_EXAMPLE
$ cat file1 file2 file3 >file4
#+END_EXAMPLE

** [[./src/main/scala/csp/net/PoliteChatServer.scala]]

This program is a chat server.  That is, a client connects to the server, then you can type into the client or server terminal
windows, and the output will be transmitted to the other side.  The server is polite in the sense that it prints a prompt and
reads one line from the server's terminal, then sends the line over the network to the client, along with a prompt for the client
to respond to; the server then awaits one line of input from the network (data is assumed to be encoded in US-ASCII, and a line is
delimited by the newline "\n" character), and prints it out on the server's terminal.  It then repeats until end of file is read
from the network or the server terminal.

Sample run in server terminal:
#+BEGIN_EXAMPLE
$ ./target/start csp.net.PoliteChatServer
serverPort = 7002
Your turn> hi
hi
Your turn> how are you?
pretty good, thanks; you?
Your turn> not bad
 
Your turn> nothing on next server prompt
?
Your turn> 
don't forget to check program works for empty lines...
Your turn> 
#+END_EXAMPLE
and client terminal:
#+BEGIN_EXAMPLE
$ nc localhost 7002
hi
Your turn> hi
how are you?
Your turn> pretty good, thanks; you?
not bad
Your turn> 
nothing on next server prompt
Your turn> ?

Your turn> don't forget to check program works for empty lines...

Your turn> 
#+END_EXAMPLE

** [[./src/main/scala/csp/net/SlowPortScan.scala]]

This program does a sequential scan of ports 0-1023 (inclusive) of all hostnames and/or IP addresses listed on the command line.

Sample run:
#+BEGIN_EXAMPLE
$ ./target/start csp.net.SlowPortScan localhost
Scanning localhost
open ports on localhost: List(22, 139, 445, 631)
#+END_EXAMPLE

* Homework 3 - due 2014-10-19 by 11:59PM

1. Complete the course-log.org entries for weeks 4 and 5.  This must include copying and pasting the following 
   checklists into course-log.org, then checking the boxes to indicate you have done each one.  You must also include
   any other reading, experiments, or new things that you have learned about distributed systems (or Linux in general).
   (It is very helpful for me to know what is useful to you!).

   *REMINDER*: Please put your journal entries inside course-log.org under the appropriate week.  My workflow is to run 
   script/macro to open each course-log.org file in turn and open the "Week <n>" tab.  I won't go hunting elsewhere.

   Week 4

   - [ ] ran all code in week 3 class lectures (concurrency)

   Week 5

   - [ ] read Textbook chapter: Non-Blocking I/O
   - [ ] read http://web.stanford.edu/~ouster/cgi-bin/papers/threads.pdf
   - [ ] *OPTIONAL* read https://www.usenix.org/legacy/events/hotos03/tech/full_papers/vonbehren/vonbehren.pdf
   - [ ] *OPTIONAL* browse "The C10K problem" http://www.kegel.com/c10k.html

2. Complete the following programs and test them out.  

   If you are reading this in Emacs:

   - Move the cursor over each line beginning with "**" and press TAB to unfold / fold.

** [[./src/main/scala/csp/net/ConcurrentHelloServer.scala]]

This multithreaded server implements a simple protocol: 

1. The client sends a name to the server.  The name consists of all characters up to (but not
   including) the first newline character.

2. Normally, the server responds to the client with ("hello " + name).
   However, if the name is "backdoor", the server responds with the collection of all names
   entered by clients in previous connections.  For this reason, the server must keep track
   of all names entered.

Example usage:

1. Start the server

  #+BEGIN_EXAMPLE
  $ ./target/start csp.net.ConcurrentHelloServer
  #+END_EXAMPLE

2. Run a client and send "backdoor".  The empty set is printed back.

  #+BEGIN_EXAMPLE
  $ nc localhost 7000
  backdoor
  []
  #+END_EXAMPLE

3. Run a client and send "alice".  "hello alice" is printed back.

  #+BEGIN_EXAMPLE
  $ nc localhost 7000
  alice
  hello alice
  #+END_EXAMPLE

4. Run a client and send "bob".  "hello bob" is printed back.

  #+BEGIN_EXAMPLE
  $ nc localhost 7000
  bob
  hello bob
  #+END_EXAMPLE

5. Run a client and send "charlie".  "hello charlie" is printed back.

  #+BEGIN_EXAMPLE
  $ nc localhost 7000
  charlie
  hello charlie
  #+END_EXAMPLE

6. Run a client and send "backdoor".  The set { alice, bob, charlie } is printed back (order is
   unimportant, and square brackets are used when printing a collection).

  #+BEGIN_EXAMPLE
  $ nc localhost 7000
  backdoor
  [bob, alice, charlie]
  #+END_EXAMPLE

7. The server will have been printing one line as each connection is made.

  #+BEGIN_EXAMPLE
  $ ./target/start csp.net.ConcurrentHelloServer
  Connection from: /0:0:0:0:0:0:0:1:33593
  Connection from: /0:0:0:0:0:0:0:1:33594
  Connection from: /0:0:0:0:0:0:0:1:33595
  Connection from: /0:0:0:0:0:0:0:1:33596
  Connection from: /0:0:0:0:0:0:0:1:33597
  #+END_EXAMPLE

** [[./src/main/scala/csp/net/ConcurrentFileServer.scala]]

This multithreaded server implements a very simple file server.  It only allows downloading of
files, and only works sensibly for text files.

The server prints a "> " prompt and then expects one of the following commands from the client:

- "get ..."

  where "..." is some path to a file on the server's side.  The server responds with the contents of
  that file, i.e., it reads the file using a FileReader, and sends what it reads to the client.  If
  it is a non-text file, it will look garbled on the client's side - that's why this is really just
  for text files.

- "ls ..."

  where "..." is some path on the server's side.  The server responds with a list of files in the
  directory "...".

- "quit"

  closes the connection to this client only.  There may be connections open between the server and
  other clients.

Example usage:

1. Start the server.

   #+BEGIN_EXAMPLE
   $ ./target/start csp.net.ConcurrentFileServer
   #+END_EXAMPLE

2. Run a client and send "ls .".  It prints the files/directories in the directory ".".
   Then send "get build.sbt".  It prints the contents of the file (obtained from the server - it should work over the network!).
   Then send "quit".  It should close the connection and print "toodle pip".

  #+BEGIN_EXAMPLE
  $ nc localhost 7000
  > ls .
  ./.gitignore
  ./README.org
  ./build.sbt
  ./other-tests.sbt
  ./project
  ./sed
  ./src
  ./target
  > get build.sbt
  import com.typesafe.sbt.SbtStartScript
  
  name := "CSC376 Assignments"
  
  version := "1.0"
  
  scalaVersion := "2.11.2"
  
  scalacOptions ++= 
  Seq("-deprecation",
      "-feature",
      "-target:jvm-1.7",
      "-unchecked")
  
  resolvers ++= Seq(
  "Sonatype Releases" at "http://oss.sonatype.org/content/repositories/releases"
  )
  
  libraryDependencies ++= Seq(
  "org.scalatest"  %% "scalatest"  % "2.2.1"  % "test",
  "org.scalacheck" %% "scalacheck" % "1.11.5" % "test",
  "org.pegdown"    %  "pegdown"    % "1.4.2"  % "test"
  )
  
  seq(SbtStartScript.startScriptForClassesSettings: _*)
  > quit
  toodle pip
  #+END_EXAMPLE

3. The server will have been printing one line whenever a connection is made or a file is
   downloaded.

   #+BEGIN_EXAMPLE
   Connection from: /0:0:0:0:0:0:0:1:33785
   Sending 'other-tests.sbt' to: /0:0:0:0:0:0:0:1:33785
   #+END_EXAMPLE

Optional: it is a bit annoying to not have command-line editing if you like that kind of thing.  To
get command-line editing with netcat, get =rlwrap= and then run =nc= as follows.  Then you can press
UP / DOWN / LEFT / RIGHT as you edit the line to send to the server.

  #+BEGIN_EXAMPLE
  $ sudo apt-get install rlwrap

  $ rlwrap nc localhost 7000
  #+END_EXAMPLE

** [[./src/main/scala/csp/net/FastPortScan.scala]]

This program does a sequential scan of ports 0-1023 (inclusive) of all hostnames and/or IP addresses listed on the command line.

It differs from the previous SlowPortScan.scala in that it creates a new thread for each attempted socket connection.  

With SlowPortScan, the attempt to connect to port N must succeed, fail, or timeout, before the attempt to connect to port N+1
begins.  If a firewall causes timeouts by discarding attempts to establish connections, the scan for the host will take
(1024*timeout).

With FastPortScan, all attempts to establish connections occur concurrently, so the maximum length of time should be (timeout).

Sample run:
#+BEGIN_EXAMPLE
$ ./target/start csp.net.FastPortScan localhost 
[(localhost,445), (localhost,631), (localhost,139), (localhost,22)]
#+END_EXAMPLE

* Homework 4 - due 2014-11-09 by 11:59PM

1. Complete the course-log.org entries for weeks 6 and 7.  This must include copying and pasting the following 
   checklists into course-log.org, then checking the boxes to indicate you have done each one.  You must also include
   any other reading, experiments, or new things that you have learned about distributed systems (or Linux in general).
   (It is very helpful for me to know what is useful to you!).

   *REMINDER*: Please put your journal entries inside course-log.org under the appropriate week.  My workflow is to run 
   script/macro to open each course-log.org file in turn and open the "Week <n>" tab.  I won't go hunting elsewhere.

   Week 6

   - [ ] ran all code in non-blocking I/O class lectures (java.nio and Netty)

   Week 7

   - [ ] survived class

2. Complete the following programs and test them out.  

   If you are reading this in Emacs:

   - Move the cursor over each line beginning with "**" and press TAB to unfold / fold.

** [[./src/main/scala/csp/net/NIOCensor.scala]]

This server uses =select= from =java.nio= to implement a simple protocol for multiple clients.

The server reads bytes sent to it from the client.  After each read, it writes the same number of
bytes back to the client *immediately*.  The bytes/characters written back must satisfy the
following conditions.  You must assume an ASCII encoding for the data, i.e., each byte is one
character.

1. For each character read from the client that is neither '\r' nor '\n', write 'x' back to the
   client.

2. For each character '\r' or '\n' read from the client, write the same character '\r' or '\n' back
   to the client.

Example usage:

1. Start the server

  #+BEGIN_EXAMPLE
  $ ./target/start csp.net.NIOCensor
  #+END_EXAMPLE

2. Run netcat and send "hello" then "the rain in spain" (press ENTER after each one).  The same
   number of "x" bytes is returned (plus the same end of line characters sent by netcat).

  #+BEGIN_EXAMPLE
  $ nc localhost 7000
  hello
  xxxxx
  the rain in spain
  xxxxxxxxxxxxxxxxx
  #+END_EXAMPLE

3. Run socat in raw mode and send "hello" then "the rain in spain" (press ENTER then Control-j after
   each one).  The same number of "x" bytes is returned (plus the same end of line characters sent
   by socat).  The difference is that there is no local echoing on the client this time.  Press
   Control-o to quit socat.

  #+BEGIN_EXAMPLE
  $ socat STDIO,raw,echo=0,escape=0x0f TCP:localhost:7000
  xxxxx
  xxxxxxxxxxxxxxxxx
  #+END_EXAMPLE

** [[./src/main/scala/csp/net/NIOFileServer.scala]]

This server uses =select= from =java.nio= to implement a very simple file server for multiple
clients.  This server behaves like the ConcurrentFileServer.scala from homework 3, but is
implemented using a single thread.

You should implement the "ls" and "get" commands as in ConcurrentFileServer.  You need not implement
the "quit" command. 

A few helper functions are given to you in the file.  You are free to use these functions in your
code.

For further instructions, see the comments in the file.

** [[./src/main/scala/csp/net/NettyFileServer.scala]]

This server uses Netty to implement a very simple file server for multiple clients.  This server
behaves like the ConcurrentFileServer.scala from homework 3, but Netty is responsible for management
of threads and the event loop.

You should implement the "ls", "get", and "quit" commands as in ConcurrentFileServer.  NOTE: you
MUST implement the "quit" command.

I strongly recommend that you base your code on the following from the class examples:

  src/main/scala/csp/netty/CommandServer.scala

* Homework 5 - due 2014-11-20 by 11:59PM

1. Complete the course-log.org entries for weeks 8 and 9.  This must include copying and pasting the following 
   checklists into course-log.org, then checking the boxes to indicate you have done each one.  You must also include
   any other reading, experiments, or new things that you have learned about distributed systems (or Linux in general).
   (It is very helpful for me to know what is useful to you!).

   *REMINDER*: Please put your journal entries inside course-log.org under the appropriate week.  My workflow is to run 
   script/macro to open each course-log.org file in turn and open the "Week <n>" tab.  I won't go hunting elsewhere.

   Week 8

   - [ ] Concluded that java.nio is a pain.

   Week 9

   - [ ] Tried running all of the Akka examples

2. Complete the following programs and test them out.  

   If you are reading this in Emacs:

   - Move the cursor over each line beginning with "**" and press TAB to unfold / fold.

** [[./src/main/scala/csp/akka/Monster.scala]]

This server contains a monster that moves between client terminals and occasionally hides.  To get
the monster, you must type "pew pew" into the client terminal with the monster, before it moves.

A running version was demonstrated in class on 2014-11-13.  You can see the video recording (at the
beginning of that class) to watch it in action.

You should first try a working version by downloading:

  http://fpl.cs.depaul.edu/cpitcher/courses/csc376/monster.jar

Start the server using:

#+BEGIN_EXAMPLE
java -jar monster.jar
#+END_EXAMPLE

Then connect with at least two clients using two new terminals.  In each one, run:

#+BEGIN_EXAMPLE
nc localhost 7000
#+END_EXAMPLE

Try typing "pew pew" and ENTER into a client terminal when the monster appears.  You have to be
quick!

Your task is to complete the existing Monster.scala code to achieve the same behavior.

The code is structured using a single Server actor, and one Handler actor per client connection (as
in the previous Akka examples with TCP connections).  There is a single Monster actor that is
responsible for the monster's behavior.  It receives data from each Handler, e.g., when "pew pew" or
some other string has arrived.  It writes data to each Handler (as a message), e.g., to say when the
monster has been hit or not.  It also receives messages about when a Handler actor is Terminated
(meaning the client TCP connection has ended, and it can use that to make sure the monster is not
stuck "in" a non-existing client.

To run your own code, use the following command (if you get an error message about not finding the
ActorSystem, rerun "startScript" from the SBT console):

#+BEGIN_EXAMPLE
./target/start csp.akka.Monster
#+END_EXAMPLE

* Local variables

Local Variables:
fill-column: 100
End:

